{"version":3,"sources":["app/pages/Home/reducer.js","app/reducer.js","app/components/PageLoader/PageLoader.jsx","app/components/PageLoader/index.js","app/router.jsx","app/serviceWorker.js","app/main.js","app/pages/Home/actions.js"],"names":["initialState","Immutable","Map","reducer","state","action","type","IS_MOBILE","DISPATCH_CARD_POSITION","UPDATE_FORM_ERRORS","UPDATE_FORM_VALUES","mergeDeep","payload","combineReducers","data","pages","home","homeReducer","PageLoader","props","className","defaultProps","LoadableHome","Loadable","loader","loading","Router","store","this","basename","exact","path","component","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","immutable","compose","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","dispatchDeviceType","isMobile","dispatchCardPosition","formErrors"],"mappings":"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","file":"static/js/main.a627b25c.chunk.js","sourcesContent":["import Immutable from 'immutable'\r\nimport {IS_MOBILE, DISPATCH_CARD_POSITION, UPDATE_FORM_ERRORS, UPDATE_FORM_VALUES} from './actions'\r\n\r\nconst initialState = Immutable.Map()\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case IS_MOBILE:\r\n        case DISPATCH_CARD_POSITION:\r\n        case UPDATE_FORM_ERRORS:\r\n        case UPDATE_FORM_VALUES:\r\n            return state.mergeDeep(action.payload)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import {combineReducers} from 'redux'\r\nimport homeReducer from './pages/Home/reducer'\r\n\r\nexport default combineReducers({\r\n    data: combineReducers({\r\n        pages: combineReducers({\r\n            home: homeReducer\r\n        })\r\n    })\r\n})\r\n","import React from 'react';\r\n\r\nconst PageLoader = props => {\r\n  return (\r\n    <div className='c-PageLoader'>\r\n      <div className=\"c-PageLoader__lds-ripple\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n      // <div className='c-PageLoader'>\r\n      //   <div className='is-animate'>\r\n      //     <div className='l'>l</div>\r\n      //     <div className='l'>o</div>\r\n      //     <div className='l'>a</div>\r\n      //     <div className='l'>d</div>\r\n      //     <div className='l'>i</div>\r\n      //     <div className='l'>n</div>\r\n      //     <div className='l'>g</div>\r\n      //   </div>\r\n      // </div>\r\n};\r\n\r\nPageLoader.defaultProps = {\r\n\r\n};\r\n\r\nPageLoader.propTypes = {\r\n\r\n};\r\n\r\nexport default PageLoader;","import PageLoader from './PageLoader.jsx';\r\n\r\nexport default PageLoader;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport Loadable from 'react-loadable'\r\nimport PageLoader from './components/PageLoader';\r\n\r\nexport const LoadableHome = Loadable({\r\n    loader: () => import('./pages/Home'),\r\n    loading: PageLoader\r\n})\r\n\r\nclass Router extends React.Component {\r\n\r\n    render() {\r\n        const {store} = this.props\r\n        return (\r\n            <Provider store={store}>\r\n                <BrowserRouter basename=\"subset_trello\">\r\n                    <Route exact path=\"/\" component={LoadableHome} />\r\n                    <Route exact path=\"/todos/manage\" component={LoadableHome} />\r\n                </BrowserRouter>\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\n\r\nRouter.propTypes = {\r\n    store: PropTypes.object\r\n}\r\n\r\nexport default Router\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk'\r\nimport Immutable from 'immutable'\r\nimport {createStore, applyMiddleware, compose} from 'redux'\r\nimport reducer from './reducer';\r\nimport Router from \"./router\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './main.scss'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst composeEnhancers =\r\ntypeof window === 'object' &&\r\nwindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\nwindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n  serialize: { // prettier-ignore\r\n    immutable: Immutable\r\n  }\r\n}) : compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\r\n\r\nReactDOM.render(<Router store={store} />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\nserviceWorker.register();","export const UPDATE_FORM_VALUES = 'UPDATE_SECTION_DISPLAY_FORM_VALUES'\r\nexport const UPDATE_FORM_ERRORS = 'UPDATE_SECTION_DISPLAY_FORM_ERRORS'\r\nexport const IS_MOBILE = 'IS_MOBILE';\r\nexport const DISPATCH_CARD_POSITION = 'DISPATCH_CARD_POSITION';\r\n\r\nexport const dispatchDeviceType = (isMobile) => {\r\n    return {\r\n        type: IS_MOBILE,\r\n        payload: isMobile\r\n    }\r\n}\r\n\r\nexport const updateFormValues = (formValues) => {\r\n    return {\r\n        type: UPDATE_FORM_VALUES,\r\n        payload: formValues\r\n    }\r\n}\r\n\r\nexport const updateFormErrors = (formErrors) => {\r\n    return {\r\n        type: UPDATE_FORM_ERRORS,\r\n        payload: formErrors\r\n    }\r\n}\r\n\r\nexport const dispatchCardPosition = (formErrors) => {\r\n    return {\r\n        type: DISPATCH_CARD_POSITION,\r\n        payload: formErrors\r\n    }\r\n}\r\n"],"sourceRoot":""}